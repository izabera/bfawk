#!/bin/gawk -bf
# lol -bf

function getchar() {
  # eat up all the input
  if (!readonce++) getline
  return char[$(++read)]
}

BEGIN {
  RS = "\0"
  FS = ""

  getline prog < ARGV[ARGC = 1]

  gsub(/[^][<>,.+-]/, "", prog)

  # optimizations
  while (prog ~ /<>|><|\+-|-\+|[+-]z|zz+/) {
    # clear loops
    gsub(/\[[+-]]/, "z", prog)

    # dead code
    gsub(/<>|><|\+-|-\+/, "", prog)
    gsub(/[+-]+z/, "z", prog)
    gsub(/zz+/, "z", prog)
  }

  # these are by far the most common scan loops, optimize them without rle
  gsub(/\[>]/, "r", prog)
  gsub(/\[<]/, "l", prog)
  gsub(/\[>>]/, "R", prog)
  gsub(/\[<<]/, "L", prog)

  split(prog, program)
  len = length(program)

  # rle
  i = 1
  for (pos = 1; pos <= len; pos++) {
    if (program[pos] ~ /[<>+-]/) {
      while (program[pos] == program[pos+(++rle[i])]);
      pos += rle[i]-1
    }
    program[i++] = program[pos]
  }
  len = i-1

  # jump table
  for (pos = 1; pos <= len; pos++) {
         if (program[pos] == "[") stack[depth++] = pos
    else if (program[pos] == "]") jump[jump[pos] = stack[--depth]] = pos
  }

  # lookup table for characters
  for (c = 0; c <= 255; c++) char[sprintf("%c", c)] = c

  cell = 0
  for (pos = 1; pos <= len; pos++) {
    switch (program[pos]) {
      case "+": tape[cell] = and(tape[cell] + rle[pos], 255); break
      case "-": tape[cell] = and(tape[cell] - rle[pos], 255); break
      case ">": cell += rle[pos]                            ; break
      case "<": cell -= rle[pos]                            ; break
      case ",": tape[cell] = getchar()                      ; break
      case ".": printf("%c", tape[cell])                    ; break
      case "z": tape[cell] = 0                              ; break
      case "[": if (!tape[cell]) pos = jump[pos]            ; break
      case "]": if ( tape[cell]) pos = jump[pos]            ; break
      case "r": while (tape[cell]) cell++                   ; break
      case "l": while (tape[cell]) cell--                   ; break
      case "R": while (tape[cell]) cell += 2                ; break
      case "L": while (tape[cell]) cell -= 2                ; break
    }
  }
}
