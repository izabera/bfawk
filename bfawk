#!/bin/gawk -bf
# lol -bf

function getchar() {
  if (read == NF) {
    if (!getline) return 0
    $0 = $0 RT
    read = 0
  }
  return char[$(++read)]
}

function byte(val) {
    val %= 256
    return val < 0 ? val + 256 : val
}

BEGIN {
  RS = "\0"
  FS = ""

  getline prog < ARGV[ARGC = 1]

  RS = "\n"

  gsub(/[^][<>,.+-]/, "", prog)

  # optimizations
  while (prog ~ /<>|><|\+-|-\+|\[[+-]]|[+-]z|zz+|[z\]]\[[^]]*]/) {
    # clear loops
    gsub(/\[[+-]]/, "z", prog)

    # dead code
    gsub(/<>|><|\+-|-\+/, "", prog)
    gsub(/z\[[^]]*]/, "z", prog)
    gsub(/]\[[^]]*]/, "]", prog)
    gsub(/[+-]+z/, "z", prog)
    gsub(/zz+/, "z", prog)
  }

  # these are by far the most common scan loops, optimize them without rle
  gsub(/\[>]/, "r", prog)
  gsub(/\[<]/, "l", prog)
  gsub(/\[>>]/, "R", prog)
  gsub(/\[<<]/, "L", prog)

  split(prog, program)
  len = length(program)

  # rle
  i = 1
  for (pos = 1; pos <= len; pos++) {
    switch (program[pos]) {
      case /[<>+-]/:
        while (program[pos] == program[pos+(++rle[i])]);
        pos += rle[i]-1
        break
      case "z":
        # optimize [-]+++
        while (program[pos+1] == "+") { rle[i] = byte(rle[i]+1); pos++ }
        while (program[pos+1] == "-") { rle[i] = byte(rle[i]-1); pos++ }
        program[pos] = "z"
    }
    program[i++] = program[pos]
  }
  len = i-1

  # jump table
  for (pos = 1; pos <= len; pos++) {
         if (program[pos] == "[") stack[depth++] = pos
    else if (program[pos] == "]") jump[jump[pos] = stack[--depth]] = pos
  }

  for (c = 0; c <= 255; c++) char[sprintf("%c", c)] = c

  cell = 0
  for (pos = 1; pos <= len; pos++) {
    switch (program[pos]) {
      case "+": tape[cell] = byte(tape[cell] + rle[pos]); break
      case "-": tape[cell] = byte(tape[cell] - rle[pos]); break
      case ">": cell += rle[pos]                        ; break
      case "<": cell -= rle[pos]                        ; break
      case ",": tape[cell] = getchar()                  ; break
      case ".": printf("%c", tape[cell]); fflush()      ; break
      case "z": tape[cell] = rle[pos]                   ; break
      case "[": if (!tape[cell]) pos = jump[pos]        ; break
      case "]": if ( tape[cell]) pos = jump[pos]        ; break
      case "r": while (tape[cell]) cell++               ; break
      case "l": while (tape[cell]) cell--               ; break
      case "R": while (tape[cell]) cell += 2            ; break
      case "L": while (tape[cell]) cell -= 2            ; break
    }
  }
}
